const {expect} = require('chai') 
const {egyptianUnitFraction} = require('../egyptianUnitFraction')

describe('Test Eqyptian fraction on denominator 0', () => {
    it('It should return an error', () => {
        expect(egyptianUnitFraction(3,0)).to.be.an('error')
    })
})

describe('Test Eqyptian fraction on numinator 0', () => {
    it('It should return 0', () => {
        expect(egyptianUnitFraction(0,3)).to.be.equal(0)
    })
})

describe('Test Eqyptian fraction on both or one of numinator denuminator of type string', () => {
    it('It should return error', () => {
        expect(egyptianUnitFraction('a',3)).to.be.an('error')
        expect(egyptianUnitFraction(1,'b')).to.be.an('error')
        expect(egyptianUnitFraction('a','b')).to.be.an('error')
    })
})

describe('Test Eqyptian fraction on numinator or denuminator is null or both are null', () => {
    it('It should return error', () => {
        expect(egyptianUnitFraction(null, 2)).to.be.an('error')
        expect(egyptianUnitFraction(2, null)).to.be.an('error')
        expect(egyptianUnitFraction(null, null)).to.be.an('error')
    })
})

describe('Test Eqyptian fraction on numinator or denuminator is boolean or both are boolean', () => {
    it('It should return error', () => {
        expect(egyptianUnitFraction(false, 2)).to.be.an('error')
        expect(egyptianUnitFraction(2, true)).to.be.an('error')
        expect(egyptianUnitFraction(true, false)).to.be.an('error')
    })
})

describe('Test Eqyptian fraction on numinator or denuminator is object or both are object', () => {
    it('It should return error', () => {
        expect(egyptianUnitFraction({'a':1}, 2)).to.be.an('error')
        expect(egyptianUnitFraction(2, {'a':1})).to.be.an('error')
        expect(egyptianUnitFraction({'a':1}, {'a':3})).to.be.an('error')
    })
})

describe('Test Eqyptian fraction on numinator 1', () => {
    it('It should return true', () => {
        expect(egyptianUnitFraction(1,4)).to.have.lengthOf(1)
    })
})

describe('Test Eqyptian fraction on same numinator and denuminator ', () => {
    it('It should return true', () => {
        expect(egyptianUnitFraction(4,4)).to.have.lengthOf(1)
    })
})

describe('Test Eqyptian fraction on negative numinator', () => {
    it('It should return an Error', () => {
        expect(egyptianUnitFraction(-4,4)).to.be.an('error')
    })
})

describe('Test Eqyptian fraction on negative denuminator', () => {
    it('It should return an Error', () => {
        expect(egyptianUnitFraction(4,-4)).to.be.an('error')
    })
})

describe('Test Eqyptian fraction on negative numinator and 0 denuminator', () => {
    it('It should return an Error', () => {
        expect(egyptianUnitFraction(-4,0)).to.be.an('error')
    })
})

describe('Test Eqyptian fraction on 0 numinator and nagative denuminator', () => {
    it('It should return 0', () => {
        expect(egyptianUnitFraction(0,-1)).to.be.equal(0)
    })
})

describe('Test Eqyptian fraction on numinator > denuminator and divisible', () => {
    it('It should return true', () => {
        expect(egyptianUnitFraction(4,2)).to.have.lengthOf(1)
    })

    it('Numerator should be 2', () => {
        expect(egyptianUnitFraction(4,2)[0].result.numerator).to.be.equal(2)
    })

    it('Denumerator should be 1', () => {
        expect(egyptianUnitFraction(4,2)[0].result.denominator).to.be.equal(1)
    })
})

describe('Test Eqyptian fraction on numinator > denuminator and not divisible', () => {
    it('It should return true', () => {
        expect(egyptianUnitFraction(7,2)).to.have.lengthOf(2)
    })

    it('Numerator of first fraction should be 3', () => {
        expect(egyptianUnitFraction(7,2)[0].result.numerator).to.be.equal(3)
    })

    it('Denumerator of first fraction should be 1', () => {
        expect(egyptianUnitFraction(7,2)[0].result.denominator).to.be.equal(1)
    })

    it('Numerator of second fraction should be 1', () => {
        expect(egyptianUnitFraction(7,2)[1].result.numerator).to.be.equal(1)
    })

    it('Denumerator of second fraction should be 2', () => {
        expect(egyptianUnitFraction(7,2)[1].result.denominator).to.be.equal(2)
    })
})

describe('Test Eqyptian fraction on numinator > denuminator and not divisible', () => {
    it('It should return true', () => {
        expect(egyptianUnitFraction(7,2)).to.have.lengthOf(2)
    })

    it('Numerator of first fraction should be 3', () => {
        expect(egyptianUnitFraction(7,2)[0].result.numerator).to.be.equal(3)
    })

    it('Denumerator of first fraction should be 1', () => {
        expect(egyptianUnitFraction(7,2)[0].result.denominator).to.be.equal(1)
    })

    it('Numerator of second fraction should be 1', () => {
        expect(egyptianUnitFraction(7,2)[1].result.numerator).to.be.equal(1)
    })

    it('Denumerator of second fraction should be 2', () => {
        expect(egyptianUnitFraction(7,2)[1].result.denominator).to.be.equal(2)
    })
})

describe('Test Eqyptian fraction on numinator < denuminator and divisible', () => {
    it('It should return true', () => {
        expect(egyptianUnitFraction(2,4)).to.have.lengthOf(1)
    })

    it('Numerator of first fraction should be 1', () => {
        expect(egyptianUnitFraction(2,4)[0].result.numerator).to.be.equal(1)
    })

    it('Denumerator of first fraction should be 2', () => {
        expect(egyptianUnitFraction(2,4)[0].result.denominator).to.be.equal(2)
    })
})

describe('Test Eqyptian fraction on numinator < denuminator and not divisible', () => {
    it('It should return true', () => {
        expect(egyptianUnitFraction(3,4)).to.have.lengthOf(2)
    })

    it('Numerator of first fraction should be 1', () => {
        expect(egyptianUnitFraction(3,4)[0].result.numerator).to.be.equal(1)
    })

    it('Denumerator of first fraction should be 2', () => {
        expect(egyptianUnitFraction(3,4)[0].result.denominator).to.be.equal(2)
    })

    it('Numerator of second fraction should be 1', () => {
        expect(egyptianUnitFraction(3,4)[1].result.numerator).to.be.equal(1)
    })

    it('Denumerator of second fraction should be 4', () => {
        expect(egyptianUnitFraction(3,4)[1].result.denominator).to.be.equal(4)
    })
})
